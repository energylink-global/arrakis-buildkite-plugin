#!/bin/bash

set -euo pipefail

echo "--- :bash: Cleaning up any old state..."
rm -rf .terraform
rm -rf .buildkite/.terraform
rm -rf .buildkite/terraform.tfstate .buildkite/terraform.tfstate.backup

# DETERMINE how many tfvars files we have
# Note: this will fail if no files exist
vars_file_count=$(ls *.tfvars | wc -l | awk '{print $1}')

branch=${BUILDKITE_BRANCH//master/production}

case $vars_file_count in
1)
  tf_vars_file=$(ls *.tfvars);;
*)
  # default case
  tf_vars_file=staging.tfvars
  # override if branch matches
  if [ -e $branch.tfvars ]; then
    tf_vars_file=$branch.tfvars
  fi
  # let the user of the plugin override
  tf_vars_file=${BUILDKITE_PLUGIN_ARRAKIS_TF_VARS_FILE:-$tf_vars_file};;
esac

echo "--- :bash: Writing pipeline.tf"
# THIS IS YOUR ROOT MODULE
cat <<TFVARS > .buildkite/pipeline.tf

# Required to control branch filtering, retrieve secrets
variable "environment" {}

variable "platform" {}

variable "master_remote_state" {
  description = "A map of S3 bucket and key that points to the master remote state file"
  type        = "map"
  default     = {}
}

variable "remote_state" {
  description = "A map of S3 bucket and key that points to the remote state file"
  type        = "map"
}

module "pipeline" {
  source = "git::ssh://git@bitbucket.org/cozero/buildkite.git//pipeline"

  # Variables that are required in your blob.tfvars file
  environment          = "\${var.environment}"
  platform             = "\${var.platform}"
  remote_state         = "\${var.remote_state}"
  master_remote_state  = "\${var.master_remote_state}"

  # Other madatory variables logically determined by this plugin
  tf_vars_file = "${tf_vars_file}"

  # optional overrides
  queue      = "${BUILDKITE_PLUGIN_ARRAKIS_QUEUE:-$BUILDKITE_AGENT_META_DATA_QUEUE}"
  tf_version = "${BUILDKITE_PLUGIN_ARRAKIS_TF_VERSION:-"stable"}"
}
TFVARS

echo "--- :terraform: init"
docker run --rm \
	-e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
	-v $(pwd)/.buildkite:/config \
	-v /var/lib/buildkite-agent/.ssh/known_hosts:/root/.ssh/known_hosts:ro \
	-v $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
	-w /config cozero/terraform:0.11.2 init

echo "--- :terraform: apply"
docker run --rm \
	-v $(pwd)/.buildkite:/config \
	-v $(pwd)/$tf_vars_file:/config/terraform.tfvars \
	-w /config cozero/terraform:0.11.2 apply -auto-approve

echo "--- :buildkite: pipeline upload"
cat .buildkite/pipeline.yml | buildkite-agent pipeline upload
