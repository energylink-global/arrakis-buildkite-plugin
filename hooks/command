#!/bin/bash

set -euo pipefail

echo "--- :bash: Cleaning up any old state..."
rm -rf .terraform
rm -rf .buildkite/.terraform
rm -rf .buildkite/terraform.tfstate .buildkite/terraform.tfstate.backup

# set the environment based on $BUILDKITE_BRANCH
case "${BUILDKITE_BRANCH:-staging}" in
master)
  environment=production;;
*)
  environment=staging;;
esac

# override branch environment based on plugin
environment=${BUILDKITE_PLUGIN_ARRAKIS_ENVIRONMENT:-$environment}

tfvars_file=${BUILDKITE_PLUGIN_ARRAKIS_TF_VARS_FILE:-"terraform-$environment.tfvars"}

echo "--- :bash: Writing pipeline.tf"
cat <<TFVARS > .buildkite/pipeline.tf
variable "environment" {}

variable "partner" {
  default = ""
}

variable "platform" {}

module "pipeline" {
  source = "git::ssh://git@bitbucket.org/cozero/buildkite.git//pipeline"

  environment        = "${environment}"
  master             = ${BUILDKITE_PLUGIN_ARRAKIS_MASTER:-false}
  partner            = "\${var.partner}"
  platform           = "\${var.platform}"
  queue              = "${BUILDKITE_PLUGIN_ARRAKIS_QUEUE:-"\${var.platform}-master"}"
  state_file         = "${BUILDKITE_PLUGIN_ARRAKIS_STATE_FILE:-""}"
  state_file_prefix  = "${BUILDKITE_PLUGIN_ARRAKIS_STATE_FILE_PREFIX:-""}"
  tf_version         = "${BUILDKITE_PLUGIN_ARRAKIS_TF_VERSION:-"stable"}"
  tfvars_file        = "${BUILDKITE_PLUGIN_ARRAKIS_TF_VARS_FILE:-""}"
}
TFVARS

echo "--- :terraform: init"
docker run --rm \
	-e SSH_AUTH_SOCK=$SSH_AUTH_SOCK \
	-v $(pwd)/.buildkite:/config \
	-v /var/lib/buildkite-agent/.ssh/known_hosts:/root/.ssh/known_hosts:ro \
	-v $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
	-w /config cozero/terraform:0.11.2 init

echo "--- :terraform: apply"
docker run --rm \
	-v $(pwd)/.buildkite:/config \
	-v $(pwd)/$tfvars_file:/config/terraform.tfvars \
	-w /config cozero/terraform:0.11.2 apply -auto-approve

echo "--- :buildkite: pipeline upload"
cat .buildkite/pipeline.yml | buildkite-agent pipeline upload
